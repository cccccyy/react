{"version":3,"sources":["component/Input.js","component/List.js","component/Todolist.js","index.js"],"names":["Input","id","ref","inp","input","value","this","props","inpValue","type","onChange","handleChange","onClick","addTodo","Component","List","renderTodos","style","color","Todolist","e","setState","target","state","todos","title","done","delTodo","idx","filter","item","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"6KAoBeA,E,uKAhBJ,IAAD,OACJ,OACE,6BACI,2BACIC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAOC,KAAKC,MAAMC,SAClBC,KAAK,OACLC,SAAUJ,KAAKC,MAAMI,eAEzB,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GAXQC,aCeLC,E,uKAdP,OACI,6BACI,4BACKT,KAAKC,MAAMS,aAAY,IAE5B,wDACA,wBAAIC,MAAO,CAACC,MAAgB,UACvBZ,KAAKC,MAAMS,aAAY,S,GATzBF,aC6FJK,E,kDA1FX,aAAc,IAAD,8BACT,gBAMJR,aAAe,SAACS,GACZ,EAAKC,SAAS,CAACb,SAASY,EAAEE,OAAOjB,SARxB,EAwBbQ,QAAU,WACkB,IAArB,EAAKU,MAAMf,WAGd,EAAKa,SAAS,CACVG,MAAM,CACF,CACIC,MAAO,EAAKF,MAAMf,SAClBkB,MAAM,IAHT,mBAKE,EAAKH,MAAMC,UAGtB,EAAKH,SAAS,CAACb,SAAS,OArCf,EAwCbmB,QAAU,SAACC,GACP,EAAKP,SAAS,CACVG,MAAO,EAAKD,MAAMC,MAAMK,QAAO,SAACC,EAAKC,GAAN,OAAcA,GAAOH,QA1C/C,EA6CbI,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKb,MAAMC,QACpDS,EAASF,GAAOL,MAAQO,EAASF,GAAOL,KACxC,EAAKL,SAAS,CACVG,MAAOS,KAjDF,EAoDbjB,YAAc,SAACU,GACX,OAAO,EAAKH,MAAMC,MAAMa,KAAI,SAACC,EAAKV,GAC9B,GAAGF,GAAMY,EAAKZ,KACV,OAAO,4BACH,2BACId,QAAS,kBAAI,EAAKoB,OAAOJ,IACzBW,QAASb,EACTjB,KAAK,aAET,0BAAM+B,wBAAyB,CAACC,OAAOH,EAAKb,SAC5C,4BACIb,QAAS,kBAAI,EAAKe,QAAQC,KAD9B,qBA5DZ,EAAKL,MAAQ,CACTf,SAAU,GACVgB,MAAM,IAJD,E,gEAWT,IAAIA,EAAQkB,aAAaC,QAAQ,SAC9BnB,GACClB,KAAKe,SAAS,CACVG,MAAOU,KAAKC,MAAMX,O,2CAK1BkB,aAAaE,QACT,QACAV,KAAKE,UAAU9B,KAAKiB,MAAMC,U,+BAkDxB,IAAD,EAEoBlB,KAAKiB,MAAvBC,EAFF,EAEEA,MAAMhB,EAFR,EAEQA,SACFgB,EAAMK,QAAQ,SAAAC,GAAI,OAAKA,EAAKJ,QACvC,OACI,yBAAKmB,UAAU,OACX,2BAAOC,QAAQ,OAAf,YACA,kBAAC,EAAD,CACItC,SAAUA,EACVG,aAAcL,KAAKK,aACnBE,QAASP,KAAKO,UAElB,wDACA,kBAAC,EAAD,CAAMG,YAAaV,KAAKU,YAAaQ,MAASA,S,GArFvCV,aCQvBiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.24804446.chunk.js","sourcesContent":["// 引入react\r\nimport React,{ Component } from 'react';\r\n \r\nclass Input extends Component {\r\n  render(){\r\n      return(\r\n        <div>\r\n            <input \r\n                id='inp'\r\n                ref={inp=>this.input = inp}\r\n                value={this.props.inpValue} \r\n                type=\"text\" \r\n                onChange={this.props.handleChange}\r\n            />\r\n            <button onClick={this.props.addTodo}>添加</button>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass List extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ul >\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul style={{color:3<2?'red':'green'}}>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport Input from './Input';\r\nimport List from './List';\r\n\r\nclass Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter( item => !item.done)\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">Todolist</label>\r\n                <Input \r\n                    inpValue={inpValue} \r\n                    handleChange={this.handleChange}\r\n                    addTodo={this.addTodo}\r\n                />\r\n                <h2>正在进行</h2>\r\n                <List renderTodos={this.renderTodos} todos = {todos}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todolist;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todolist from './component/Todolist';\n// import Home from './pages/Home';\n// import Control from './components/Control';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc,{Detail} from './pages/Hoc';\n// import Hook from './pages/Hook'\n// import Context from './pages/context'\n// console.log(Context);\n\nReactDOM.render(\n  <Todolist/>,\n  document.getElementById('root')\n);\n\n\n// 实现带有本地存储的todolist功能（类组件实现）：\n\n// 最外层index.js里render(<TodoList/>,xx)\n// TodoList组件里包含Input和List两个组件\n// 输入框输入时不进行本地存储（使用componentDidUpdate）\n\n// 写完进行npm run build,将打包完的静态传到github，\n// 设置github pages，雪梨提交网页链接和四个文件的代码\n\n\n\n\n\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n// 组件声明\n// 函数组件\n// UI（展示）组件，木偶组件\n// function App(props){\n//   const { title, id } = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n// // 智能组件\n// class Demo extends React.Component{\n//   constructor(){\n//      super();\n//     //  声明状态\n//      this.state = {\n//        name: new Date().toLocaleString()\n//      }\n//      setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//      },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n// )\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       console.log(prop)\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//             const txtNode = document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach( child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n\n//     // 将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n\n\n\n\n  // 1、原生JS，DOM操作（jQ）\n  // 2、React：开发效率高、性能高\n  // 3、环境搭建、创建一个项目、运行\n  // 4、JSX语法\n"],"sourceRoot":""}